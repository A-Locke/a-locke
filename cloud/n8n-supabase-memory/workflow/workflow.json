{
  "name": "AI Agent",
  "nodes": [
    {
      "parameters": {
        "model": "deepseek/deepseek-chat-v3-0324:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        2208,
        100
      ],
      "id": "____PLACEHOLDER_____",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "____PLACEHOLDER_____",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.memory }}",
        "options": {
          "systemMessage": "You are a helpful assistant. Use provided chat history to construct a response."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        2120,
        -120
      ],
      "id": "____PLACEHOLDER_____",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chat",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "____PLACEHOLDER_____",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        140,
        -120
      ],
      "webhookId": "____PLACEHOLDER_____"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "____PLACEHOLDER_____",
              "leftValue": "={{ $json[\"session_id\"] !== null }}",
              "rightValue": "={{ $json[\"session_id\"] !== null }}",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        580,
        -120
      ],
      "id": "____PLACEHOLDER_____",
      "name": "Session ID provided?"
    },
    {
      "parameters": {
        "jsCode": "function generateUUIDv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0,\n          v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\nreturn [{\n  json: {\n    uuid: generateUUIDv4()\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        800,
        -20
      ],
      "id": "____PLACEHOLDER_____",
      "name": "Generate UUID"
    },
    {
      "parameters": {
        "jsCode": "const body = $json.body;\n\nconst session_id = (!body.session_id || body.session_id === \"new\")\n  ? null\n  : body.session_id;\n\nreturn [\n  {\n    json: {\n      user_id: body.user_id,\n      session_id,\n      message: body.message,\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        360,
        -120
      ],
      "id": "____PLACEHOLDER_____",
      "name": "Check Session ID"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "value": "=public",
          "mode": "name"
        },
        "table": {
          "__rl": true,
          "value": "=n8n_chat_messages",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "content": "={{ $json.message }}",
            "session_id": "={{ $json.session_id }}",
            "role": "user",
            "user_id": "={{ $json.user_id }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "user_id",
              "displayName": "user_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "session_id",
              "displayName": "session_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "role",
              "displayName": "role",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "content",
              "displayName": "content",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1240,
        -120
      ],
      "id": "____PLACEHOLDER_____",
      "name": "Insert User Message",
      "credentials": {
        "postgres": {
          "id": "____PLACEHOLDER_____",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT role, content\nFROM n8n_chat_messages\nWHERE session_id = '{{ $json[\"session_id\"] || $node[\"Generate UUID (session_id)\"].json[\"uuid\"] }}'\nORDER BY created_at ASC\nLIMIT 100;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1460,
        -120
      ],
      "id": "____PLACEHOLDER_____",
      "name": "Fetch Memory",
      "credentials": {
        "postgres": {
          "id": "____PLACEHOLDER_____",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "____PLACEHOLDER_____",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        2936,
        -120
      ],
      "id": "____PLACEHOLDER_____",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "____PLACEHOLDER_____",
              "name": "=session_id",
              "value": "={{ $json.uuid }}",
              "type": "string"
            },
            {
              "id": "____PLACEHOLDER_____",
              "name": "user_id",
              "value": "={{ $node[\"Check Session ID\"].json[\"user_id\"] }}",
              "type": "string"
            },
            {
              "id": "____PLACEHOLDER_____",
              "name": "message",
              "value": "={{ $node[\"Check Session ID\"].json[\"message\"] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1020,
        -20
      ],
      "id": "____PLACEHOLDER_____",
      "name": "Set Values False"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "____PLACEHOLDER_____",
              "name": "=user_id",
              "value": "={{ $json[\"user_id\"] }}",
              "type": "string"
            },
            {
              "id": "____PLACEHOLDER_____",
              "name": "message",
              "value": "={{ $json[\"message\"] }}",
              "type": "string"
            },
            {
              "id": "____PLACEHOLDER_____",
              "name": "session_id",
              "value": "={{ $json[\"session_id\"] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1020,
        -220
      ],
      "id": "____PLACEHOLDER_____",
      "name": "Set Values True"
    },
    {
      "parameters": {
        "aggregate": "____PLACEHOLDER_____",
        "destinationFieldName": "content",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1680,
        -120
      ],
      "id": "____PLACEHOLDER_____",
      "name": "Aggregate Memory"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "____PLACEHOLDER_____",
              "name": "memory",
              "value": "={{ \n  $json.content.map(entry => ({\n    role: entry.role,\n    content: entry.content\n  })) \n}}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1900,
        -120
      ],
      "id": "____PLACEHOLDER_____",
      "name": "Format Memory"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "____PLACEHOLDER_____",
          "mode": "list",
          "cachedResultName": "____PLACEHOLDER_____"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "user_id": "={{ $('Insert User Message').item.json.user_id }}",
            "session_id": "={{ $('Insert User Message').item.json.session_id }}",
            "role": "assistant",
            "content": "={{ $json.output }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "user_id",
              "displayName": "user_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "session_id",
              "displayName": "session_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "role",
              "displayName": "role",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "content",
              "displayName": "content",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2496,
        -120
      ],
      "id": "____PLACEHOLDER_____",
      "name": "Insert Agent Message",
      "credentials": {
        "postgres": {
          "id": "____PLACEHOLDER_____",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "____PLACEHOLDER_____",
              "name": "role",
              "value": "assistant",
              "type": "string"
            },
            {
              "id": "____PLACEHOLDER_____",
              "name": "content",
              "value": "={{ $('AI Agent').item.json.output }}",
              "type": "string"
            },
            {
              "id": "____PLACEHOLDER_____",
              "name": "session_id",
              "value": "={{ $('Insert User Message').item.json.session_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2716,
        -120
      ],
      "id": "____PLACEHOLDER_____",
      "name": "Prepare Response"
    }
  ],
  "pinData": {},
  "connections": {
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "____PLACEHOLDER_____",
            "index": 0
          }
        ]
      ]
    },
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Check Session ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Session ID provided?": {
      "main": [
        [
          {
            "node": "Set Values True",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate UUID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate UUID": {
      "main": [
        [
          {
            "node": "Set Values False",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Session ID": {
      "main": [
        [
          {
            "node": "Session ID provided?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert User Message": {
      "main": [
        [
          {
            "node": "Fetch Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Memory": {
      "main": [
        [
          {
            "node": "Aggregate Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Insert Agent Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Values False": {
      "main": [
        [
          {
            "node": "Insert User Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Values True": {
      "main": [
        [
          {
            "node": "Insert User Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Memory": {
      "main": [
        [
          {
            "node": "Format Memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Memory": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Agent Message": {
      "main": [
        [
          {
            "node": "Prepare Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Response": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "____PLACEHOLDER_____",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "____PLACEHOLDER_____"
  },
  "id": "____PLACEHOLDER_____",
  "tags": []
}
